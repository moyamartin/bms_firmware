        -:    0:Source:/home/mmoya/Projects/bms_unr/bms_firmware/Core/Src/find.c
        -:    0:Graph:objs//home/mmoya/Projects/bms_unr/bms_firmware/Core/Src/find.gcno
        -:    0:Data:objs//home/mmoya/Projects/bms_unr/bms_firmware/Core/Src/find.gcda
        -:    0:Runs:1
        -:    1:#include "find.h"
        -:    2:
       55:    3:uint32_t find_closest_value_f32(float32_t needle, const float32_t * haysack, 
        -:    4:							    size_t size_of_haysack)
        -:    5:{
       55:    6:	uint32_t start = 0, end = (uint32_t) size_of_haysack - 1, mid;
        -:    7:	/*
        -:    8:	 * if the needle is less or equal than the last value of the haysack
        -:    9:	 * then return that index
        -:   10:	 */
       55:   11:	if(needle <= haysack[end]){
        1:   12:		return end;
        -:   13:	}
        -:   14:	/*
        -:   15:	 * if the needle is greater or equal than the beginning of the haysack
        -:   16:	 * return this value
        -:   17:	 */
       54:   18:	if(needle >= haysack[start]){
    #####:   19:		return start;
        -:   20:	}
        -:   21:
      219:   22:	while(start < end){
      219:   23:		mid = (end - start)/2 + start;
      219:   24:		if(needle == haysack[mid]){
    #####:   25:			return mid;
        -:   26:		}
      219:   27:		if(needle < haysack[mid]){
      118:   28:			if(mid < end && needle > haysack[mid + 1]){
       32:   29:				return get_closest_index_f32(needle, mid, mid + 1, haysack);
        -:   30:			}
       86:   31:			start = mid + 1;
        -:   32:		}
      187:   33:		if(needle > haysack[mid]){
      101:   34:			if(mid > 0 && needle < haysack[mid - 1]){
       22:   35:				return get_closest_index_f32(needle, mid - 1, mid, haysack);
        -:   36:			}
       79:   37:			end = mid - 1;
        -:   38:		}
        -:   39:	}
        -:   40:	// if not found return size
    #####:   41:	return (uint32_t) size_of_haysack;
        -:   42:}
        -:   43:
       54:   44:uint32_t get_closest_index_f32(float32_t target, uint32_t index_a, 
        -:   45:							   uint32_t index_b, const float32_t * haysack)
        -:   46:{
       54:   47:	if(haysack[index_a] - target >= target - haysack[index_b]){
        1:   48:		return index_b;
        -:   49:	} else {
       53:   50:		return index_a;
        -:   51:	}
        -:   52:}
        -:   53:
